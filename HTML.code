<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Hard Maze Game â€” 15 Levels</title>
<style>
  body {
    background: #222;
    color: #eee;
    font-family: monospace, monospace;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0;
    padding: 0;
    height: 100vh;
    user-select: none;
  }
  h1 {
    margin: 10px;
  }
  #game {
    margin-top: 10px;
    display: grid;
    grid-gap: 2px;
    background: #111;
  }
  .cell {
    width: 28px;
    height: 28px;
    background: #333;
    border-radius: 4px;
  }
  .wall {
    background: #111;
  }
  .path {
    background: #555;
  }
  .player {
    background: #4caf50;
  }
  .goal {
    background: #f44336;
  }
  #level-info {
    margin-top: 10px;
  }
  #instructions {
    margin-top: 20px;
    max-width: 400px;
    font-size: 14px;
    line-height: 1.3;
    color: #bbb;
  }
</style>
</head>
<body>
  <h1>Hard Maze Game â€” Level <span id="level-number">1</span>/15</h1>
  <div id="game"></div>
  <div id="level-info"></div>
  <div id="instructions">
    Use arrow keys to move the green square (player) to the red square (goal).<br />
    Every maze is challenging â€” good luck!<br />
    Complete all 15 levels to win.
  </div>

<script>
(() => {
  const gameEl = document.getElementById('game');
  const levelNumberEl = document.getElementById('level-number');
  const levelInfoEl = document.getElementById('level-info');

  class Maze {
    constructor(rows, cols) {
      this.rows = rows;
      this.cols = cols;
      this.grid = [];
      this.visited = [];
      for(let r=0; r<rows; r++) {
        this.grid[r] = [];
        this.visited[r] = [];
        for(let c=0; c<cols; c++) {
          this.grid[r][c] = 1; // wall
          this.visited[r][c] = false;
        }
      }
    }

    generate() {
      // Recursive Backtracking with randomization to increase complexity

      const startR = 0;
      const startC = 0;
      this.visited[startR][startC] = true;
      this.grid[startR][startC] = 0; // path

      const stack = [[startR, startC]];

      while (stack.length > 0) {
        const current = stack[stack.length - 1];
        const [r, c] = current;

        // Get neighbors 2 cells away (N, S, E, W) that are unvisited
        let neighbors = [];
        const candidates = [
          [r - 2, c],
          [r + 2, c],
          [r, c - 2],
          [r, c + 2]
        ];
        for (let [nr, nc] of candidates) {
          if (nr >= 0 && nr < this.rows && nc >= 0 && nc < this.cols) {
            if (!this.visited[nr][nc]) neighbors.push([nr, nc]);
          }
        }

        if (neighbors.length > 0) {
          // Pick random neighbor
          // But bias towards neighbors that create longer corridors (harder maze)
          // Sort neighbors randomly but with bias to the least visited around neighbor cell
          neighbors.sort(() => 0.5 - Math.random()); // shuffle

          // Pick one neighbor to break wall towards
          const [nr, nc] = neighbors[0];

          // Remove wall between current and neighbor
          const wallR = r + (nr - r) / 2;
          const wallC = c + (nc - c) / 2;
          this.grid[wallR][wallC] = 0;
          this.grid[nr][nc] = 0;
          this.visited[nr][nc] = true;

          stack.push([nr, nc]);
        } else {
          // Backtrack
          stack.pop();
        }
      }

      // Make sure goal cell is open
      this.grid[this.rows - 1][this.cols - 1] = 0;

      // Add extra random walls to increase difficulty (but ensure solvability)
      this.addExtraWalls( Math.floor(this.rows * this.cols * 0.1) ); // 10% extra walls

      // Guarantee start and goal are open
      this.grid[0][0] = 0;
      this.grid[this.rows - 1][this.cols - 1] = 0;
    }

    addExtraWalls(count) {
      // Add walls randomly on path cells but avoid start/player and goal
      let attempts = 0;
      while(count > 0 && attempts < count * 10) {
        attempts++;
        const r = Math.floor(Math.random() * this.rows);
        const c = Math.floor(Math.random() * this.cols);
        if(this.grid[r][c] === 0 && !(r === 0 && c === 0) && !(r === this.rows-1 && c === this.cols-1)) {
          // Temporarily add wall
          this.grid[r][c] = 1;
          if(this.isSolvable()) {
            count--;
          } else {
            // revert, no wall if blocks path
            this.grid[r][c] = 0;
          }
        }
      }
    }

    isSolvable() {
      // BFS to check if path from start to goal exists
      const queue = [[0, 0]];
      const visited = [];
      for(let r=0; r<this.rows; r++) {
        visited[r] = [];
        for(let c=0; c<this.cols; c++) visited[r][c] = false;
      }
      visited[0][0] = true;

      while(queue.length > 0) {
        const [r,c] = queue.shift();
        if(r === this.rows - 1 && c === this.cols - 1) return true;

        const deltas = [[1,0],[-1,0],[0,1],[0,-1]];
        for(let [dr, dc] of deltas) {
          const nr = r + dr;
          const nc = c + dc;
          if(nr >= 0 && nr < this.rows && nc >=0 && nc < this.cols) {
            if(!visited[nr][nc] && this.grid[nr][nc] === 0) {
              visited[nr][nc] = true;
              queue.push([nr,nc]);
            }
          }
        }
      }
      return false;
    }
  }

  class Player {
    constructor(r,c) {
      this.r = r;
      this.c = c;
    }
  }

  class MazeGame {
    constructor(levelCount=15) {
      this.levelCount = levelCount;
      this.level = 1;
      this.maze = null;
      this.player = null;
      this.baseSize = 7; // start maze size bigger for harder difficulty
      this.renderSize = 26;
      this.init();
    }

    init() {
      this.setupLevel();
      window.addEventListener('keydown', e => this.handleKey(e));
    }

    setupLevel() {
      // Maze size grows by 2 rows and cols each level for more complexity
      this.rows = this.baseSize + (this.level - 1) * 2;
      this.cols = this.baseSize + (this.level - 1) * 2;

      // Make sure rows and cols are odd for maze gen (standard)
      if(this.rows % 2 === 0) this.rows++;
      if(this.cols % 2 === 0) this.cols++;

      this.maze = new Maze(this.rows, this.cols);
      this.maze.generate();

      this.player = new Player(0, 0);

      this.drawMaze();
      levelNumberEl.textContent = this.level;
      levelInfoEl.textContent = `Maze Size: ${this.rows} x ${this.cols}`;
    }

    drawMaze() {
      gameEl.innerHTML = '';
      gameEl.style.gridTemplateRows = `repeat(${this.rows}, ${this.renderSize}px)`;
      gameEl.style.gridTemplateColumns = `repeat(${this.cols}, ${this.renderSize}px)`;

      for(let r=0; r<this.rows; r++) {
        for(let c=0; c<this.cols; c++) {
          const cell = document.createElement('div');
          cell.classList.add('cell');
          if(this.maze.grid[r][c] === 1) {
            cell.classList.add('wall');
          } else {
            cell.classList.add('path');
          }
          if(r === this.player.r && c === this.player.c) {
            cell.classList.add('player');
          }
          if(r === this.rows-1 && c === this.cols-1) {
            cell.classList.add('goal');
          }
          gameEl.appendChild(cell);
        }
      }
    }

    handleKey(e) {
      const key = e.key;
      const dir = {
        'ArrowUp': [-1,0],
        'ArrowDown': [1,0],
        'ArrowLeft': [0,-1],
        'ArrowRight': [0,1]
      };
      if(!(key in dir)) return;

      e.preventDefault();
      const [dr, dc] = dir[key];
      const nr = this.player.r + dr;
      const nc = this.player.c + dc;

      if(nr >= 0 && nr < this.rows && nc >=0 && nc < this.cols) {
        if(this.maze.grid[nr][nc] === 0) {
          this.player.r = nr;
          this.player.c = nc;
          this.drawMaze();
          this.checkGoal();
        }
      }
    }

    checkGoal() {
      if(this.player.r === this.rows - 1 && this.player.c === this.cols - 1) {
        if(this.level === this.levelCount) {
          alert('ðŸŽ‰ Congratulations! You completed all 15 hard levels!');
          this.level = 1;
          this.setupLevel();
        } else {
          alert(`Level ${this.level} complete! Next hard level awaits...`);
          this.level++;
          this.setupLevel();
        }
      }
    }
  }`

  new MazeGame(15);
})();
</script>
</body>
</html>
